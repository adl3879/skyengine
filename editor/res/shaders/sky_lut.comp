#version 460

#extension GL_GOOGLE_include_directive : enable

#include "sky_common.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 1) uniform sampler2D transmittanceLUT;
layout(set = 0, binding = 2) uniform sampler2D multiScatterLUT;
layout(set = 0, binding = 3, rgba32f) uniform image2D skyLUT;

const int numScatteringSteps = 32;

vec3 getValFromTLUT(sampler2D lut, vec3 pos, vec3 dir) {
    vec2 uv = vec2(0.5 + 0.5*dot(normalize(pos), dir),
                   max(0.0, min(1.0, (length(pos) - groundRadiusMM)/(atmosphereRadiusMM - groundRadiusMM))));
    return texture(lut, uv).rgb;
}

vec3 getValFromMultiScattLUT(sampler2D lut, vec3 pos, vec3 dir) {
    vec2 uv = vec2(0.5 + 0.5*dot(normalize(pos), dir),
                   max(0.0, min(1.0, (length(pos) - groundRadiusMM)/(atmosphereRadiusMM - groundRadiusMM))));
    return texture(lut, uv).rgb;
}

vec3 raymarchScattering(vec3 pos, vec3 rayDir, vec3 sunDir, float tMax, float numSteps) {
    float cosTheta = dot(rayDir, sunDir);
    float miePhaseValue = getMiePhase(cosTheta);
    float rayleighPhaseValue = getRayleighPhase(-cosTheta);
    
    vec3 lum = vec3(0.0);
    vec3 transmittance = vec3(1.0);
    float t = 0.0;
    
    for (float i = 0.0; i < numSteps; i += 1.0) {
        float newT = ((i + 0.3)/numSteps)*tMax;
        float dt = newT - t;
        t = newT;
        
        vec3 newPos = pos + t*rayDir;
        
        vec3 rayleighScattering, extinction;
        float mieScattering;
        getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);
        
        vec3 sampleTransmittance = exp(-dt*extinction);
        vec3 sunTransmittance = getValFromTLUT(transmittanceLUT, newPos, sunDir);
        vec3 psiMS = getValFromMultiScattLUT(multiScatterLUT, newPos, sunDir);
        
        vec3 rayleighInScattering = rayleighScattering*(rayleighPhaseValue*sunTransmittance + psiMS);
        vec3 mieInScattering = mieScattering*(miePhaseValue*sunTransmittance + psiMS);
        vec3 inScattering = (rayleighInScattering + mieInScattering);
        
        vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;
        lum += scatteringIntegral*transmittance;
        transmittance *= sampleTransmittance;
    }
    return lum;
}

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_coords.x >= int(view.skyLUTRes.x) || pixel_coords.y >= int(view.skyLUTRes.y)) {
        return;
    }
    
    float u = clamp(float(pixel_coords.x), 0.0, view.skyLUTRes.x-1.0)/view.skyLUTRes.x;
    float v = clamp(float(pixel_coords.y), 0.0, view.skyLUTRes.y-1.0)/view.skyLUTRes.y;
    
    float azimuthAngle = (u - 0.5)*2.0*PI;
    
    // Simplified V mapping for flat horizon
    float adjV = (v - 0.5) * PI; // Maps v [0,1] to [-PI/2, PI/2]
    
    float height = length(view.viewPos);
    vec3 up = view.viewPos / height;
    // float horizonAngle = safeacos(sqrt(height * height - groundRadiusMM * groundRadiusMM) / height) - 0.5*PI;

    vec4 normalizedCameraDir = normalize(view.camDir);
    float cameraPitch = asin(normalizedCameraDir.y); // Get pitch from camera direction
    float altitudeAngle = adjV + cameraPitch;
    
    float cosAltitude = cos(altitudeAngle);
    vec3 rayDir = vec3(cosAltitude*sin(azimuthAngle), sin(altitudeAngle), -cosAltitude*cos(azimuthAngle));
    
    // Convert time to sun direction
    // float sunAltitude = (0.5*PI) - acos(up.y);
    float sunAltitude = (0.5*PI) - acos(dot(getSunDir(view.time), up));
    vec3 sunDir = vec3(0.0, sin(sunAltitude), -cos(sunAltitude));
    
    float atmoDist = rayIntersectSphere(view.viewPos, rayDir, atmosphereRadiusMM);
    float groundDist = rayIntersectSphere(view.viewPos, rayDir, groundRadiusMM);
    float tMax = (groundDist < 0.0) ? atmoDist : groundDist;
    
    vec3 lum = raymarchScattering(view.viewPos, rayDir, sunDir, tMax, float(numScatteringSteps));
    imageStore(skyLUT, pixel_coords, vec4(lum, 1.0));
}
