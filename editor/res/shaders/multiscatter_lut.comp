#version 460

#extension GL_GOOGLE_include_directive : enable

#include "sky_common.glsl"

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(set = 0, binding = 1) uniform sampler2D transmittanceLUT;
layout(set = 0, binding = 2, rgba32f) uniform image2D multiScatterLUT;

const float mulScattSteps = 20.0;
const int sqrtSamples = 8;

vec3 getSphericalDir(float theta, float phi) {
    float cosPhi = cos(phi);
    float sinPhi = sin(phi);
    float cosTheta = cos(theta);
    float sinTheta = sin(theta);

    return vec3(sinPhi*sinTheta, cosPhi, sinPhi*cosTheta);
}

void getMulScattValues(vec3 pos, vec3 sunDir, out vec3 lumTotal, out vec3 fms) {
    lumTotal = vec3(0.0);
    fms = vec3(0.0);
    
    float invSamples = 1.0/float(sqrtSamples*sqrtSamples);
    
    for (int i = 0; i < sqrtSamples; i++) {
        for (int j = 0; j < sqrtSamples; j++) {
            float theta = PI * (float(i) + 0.5) / float(sqrtSamples);
            float phi = safeacos(1.0 - 2.0*(float(j) + 0.5) / float(sqrtSamples));
            vec3 rayDir = getSphericalDir(theta, phi);
            
            float atmoDist = rayIntersectSphere(pos, rayDir, atmosphereRadiusMM);
            float groundDist = rayIntersectSphere(pos, rayDir, groundRadiusMM);
            float tMax = (groundDist < 0.0) ? atmoDist : groundDist;
            
            float cosTheta = dot(rayDir, sunDir);
            float miePhaseValue = getMiePhase(cosTheta);
            float rayleighPhaseValue = getRayleighPhase(-cosTheta);
            
            vec3 lum = vec3(0.0);
            vec3 lumFactor = vec3(0.0);
            vec3 transmittance = vec3(1.0);
            float t = 0.0;
            
            for (float stepI = 0.0; stepI < mulScattSteps; stepI += 1.0) {
                float newT = ((stepI + 0.3)/mulScattSteps)*tMax;
                float dt = newT - t;
                t = newT;

                vec3 newPos = pos + t*rayDir;
                vec3 rayleighScattering, extinction;
                float mieScattering;
                getScatteringValues(newPos, rayleighScattering, mieScattering, extinction);

                vec3 sampleTransmittance = exp(-dt*extinction);
                vec3 scatteringNoPhase = rayleighScattering + mieScattering;
                vec3 scatteringF = (scatteringNoPhase - scatteringNoPhase * sampleTransmittance) / extinction;
                lumFactor += transmittance*scatteringF;
                
                vec2 transmittanceUV = vec2(0.5 + 0.5*dot(normalize(newPos), sunDir),
                                          max(0.0, min(1.0, (length(newPos) - groundRadiusMM)/(atmosphereRadiusMM - groundRadiusMM))));
                vec3 sunTransmittance = texture(transmittanceLUT, transmittanceUV).rgb;

                vec3 rayleighInScattering = rayleighScattering*rayleighPhaseValue;
                float mieInScattering = mieScattering*miePhaseValue;
                vec3 inScattering = (rayleighInScattering + mieInScattering)*sunTransmittance;
                vec3 scatteringIntegral = (inScattering - inScattering * sampleTransmittance) / extinction;
                lum += scatteringIntegral*transmittance;
                transmittance *= sampleTransmittance;
            }
            
            if (groundDist > 0.0) {
                vec3 hitPos = pos + groundDist*rayDir;
                if (dot(pos, sunDir) > 0.0) {
                    hitPos = normalize(hitPos)*groundRadiusMM;
                    vec2 transmittanceUV = vec2(0.5 + 0.5*dot(normalize(hitPos), sunDir),
                                              0.0);
                    lum += transmittance*groundAlbedo*texture(transmittanceLUT, transmittanceUV).rgb;
                }
            }
            
            fms += lumFactor*invSamples;
            lumTotal += lum*invSamples;
        }
    }
}

void main() {
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    if (pixel_coords.x >= int(view.msLUTRes.x) || pixel_coords.y >= int(view.msLUTRes.y)) {
        return;
    }
    
    vec2 uv = vec2(pixel_coords) / view.msLUTRes;
    float sunCosTheta = 2.0*uv.x - 1.0;
    float sunTheta = safeacos(sunCosTheta);
    float height = mix(groundRadiusMM, atmosphereRadiusMM, uv.y);
    
    vec3 pos = vec3(0.0, height, 0.0);
    vec3 sunDir = normalize(vec3(0.0, sunCosTheta, -sin(sunTheta)));
    
    vec3 lumTotal, fms;
    getMulScattValues(pos, sunDir, lumTotal, fms);
    vec3 psi = lumTotal / (1.0 - fms);
    
    imageStore(multiScatterLUT, pixel_coords, vec4(psi, 1.0));
}
